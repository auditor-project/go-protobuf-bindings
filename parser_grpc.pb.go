// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: parser.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParserHandlerServiceClient is the client API for ParserHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParserHandlerServiceClient interface {
	AuditStartProcessor(ctx context.Context, in *AuditStartRequest, opts ...grpc.CallOption) (*AuditStartResponse, error)
}

type parserHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParserHandlerServiceClient(cc grpc.ClientConnInterface) ParserHandlerServiceClient {
	return &parserHandlerServiceClient{cc}
}

func (c *parserHandlerServiceClient) AuditStartProcessor(ctx context.Context, in *AuditStartRequest, opts ...grpc.CallOption) (*AuditStartResponse, error) {
	out := new(AuditStartResponse)
	err := c.cc.Invoke(ctx, "/parser.ParserHandlerService/AuditStartProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParserHandlerServiceServer is the server API for ParserHandlerService service.
// All implementations must embed UnimplementedParserHandlerServiceServer
// for forward compatibility
type ParserHandlerServiceServer interface {
	AuditStartProcessor(context.Context, *AuditStartRequest) (*AuditStartResponse, error)
	mustEmbedUnimplementedParserHandlerServiceServer()
}

// UnimplementedParserHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParserHandlerServiceServer struct {
}

func (UnimplementedParserHandlerServiceServer) AuditStartProcessor(context.Context, *AuditStartRequest) (*AuditStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditStartProcessor not implemented")
}
func (UnimplementedParserHandlerServiceServer) mustEmbedUnimplementedParserHandlerServiceServer() {}

// UnsafeParserHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParserHandlerServiceServer will
// result in compilation errors.
type UnsafeParserHandlerServiceServer interface {
	mustEmbedUnimplementedParserHandlerServiceServer()
}

func RegisterParserHandlerServiceServer(s grpc.ServiceRegistrar, srv ParserHandlerServiceServer) {
	s.RegisterService(&ParserHandlerService_ServiceDesc, srv)
}

func _ParserHandlerService_AuditStartProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserHandlerServiceServer).AuditStartProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.ParserHandlerService/AuditStartProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserHandlerServiceServer).AuditStartProcessor(ctx, req.(*AuditStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParserHandlerService_ServiceDesc is the grpc.ServiceDesc for ParserHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParserHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parser.ParserHandlerService",
	HandlerType: (*ParserHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuditStartProcessor",
			Handler:    _ParserHandlerService_AuditStartProcessor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parser.proto",
}
